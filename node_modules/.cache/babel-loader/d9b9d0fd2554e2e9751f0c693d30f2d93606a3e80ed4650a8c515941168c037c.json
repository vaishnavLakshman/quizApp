{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactJS_101\\\\quizapp_v1.0\\\\src\\\\Components\\\\Dashboard\\\\Quiz\\\\StopWatch\\\\Stopwatch.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Stopwatch.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Stopwatch() {\n  _s();\n  // state to store time\n  const [time, setTime] = useState(0);\n\n  // state to check stopwatch running or not\n  const [isRunning, setIsRunning] = useState(props.run);\n  useEffect(() => {\n    let intervalId;\n    if (isRunning) {\n      // setting time from 0 to 1 every 10 milisecond using javascript setInterval method\n      intervalId = setInterval(() => setTime(time + 1), 10);\n    }\n    return () => clearInterval(intervalId);\n  }, [isRunning, time]);\n\n  // Hours calculation\n  const hours = Math.floor(time / 360000);\n\n  // Minutes calculation\n  const minutes = Math.floor(time % 360000 / 6000);\n\n  // Seconds calculation\n  const seconds = Math.floor(time % 6000 / 100);\n\n  // Milliseconds calculation\n  const milliseconds = time % 100;\n\n  // Method to start and stop timer\n  const startAndStop = () => {\n    setIsRunning(!isRunning);\n  };\n\n  // Method to reset timer back to 0\n  const reset = () => {\n    setTime(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stopwatch-container\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"stopwatch-time\",\n      children: [hours, \":\", minutes.toString().padStart(2, \"0\"), \":\", seconds.toString().padStart(2, \"0\"), \":\", milliseconds.toString().padStart(2, \"0\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(Stopwatch, \"iYHvgY01FQ1+4a3yDHR2kqCNWBg=\");\n_c = Stopwatch;\nexport default Stopwatch;\nvar _c;\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Stopwatch","_s","time","setTime","isRunning","setIsRunning","props","run","intervalId","setInterval","clearInterval","hours","Math","floor","minutes","seconds","milliseconds","startAndStop","reset","className","children","toString","padStart","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/ReactJS_101/quizapp_v1.0/src/Components/Dashboard/Quiz/StopWatch/Stopwatch.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Stopwatch.css\";\r\n\r\nfunction Stopwatch() {\r\n  // state to store time\r\n  const [time, setTime] = useState(0);\r\n\r\n  // state to check stopwatch running or not\r\n  const [isRunning, setIsRunning] = useState(props.run);\r\n\r\n  useEffect(() => {\r\n    let intervalId;\r\n    if (isRunning) {\r\n      // setting time from 0 to 1 every 10 milisecond using javascript setInterval method\r\n      intervalId = setInterval(() => setTime(time + 1), 10);\r\n    }\r\n    return () => clearInterval(intervalId);\r\n  }, [isRunning, time]);\r\n\r\n  // Hours calculation\r\n  const hours = Math.floor(time / 360000);\r\n\r\n  // Minutes calculation\r\n  const minutes = Math.floor((time % 360000) / 6000);\r\n\r\n  // Seconds calculation\r\n  const seconds = Math.floor((time % 6000) / 100);\r\n\r\n  // Milliseconds calculation\r\n  const milliseconds = time % 100;\r\n\r\n  // Method to start and stop timer\r\n  const startAndStop = () => {\r\n    setIsRunning(!isRunning);\r\n  };\r\n\r\n  // Method to reset timer back to 0\r\n  const reset = () => {\r\n    setTime(0);\r\n  };\r\n  return (\r\n    <div className=\"stopwatch-container\">\r\n      <p className=\"stopwatch-time\">\r\n        {hours}:{minutes.toString().padStart(2, \"0\")}:\r\n        {seconds.toString().padStart(2, \"0\")}:\r\n        {milliseconds.toString().padStart(2, \"0\")}\r\n      </p>\r\n      {/* <div className=\"stopwatch-buttons\">\r\n        <button className=\"stopwatch-button\" onClick={startAndStop}>\r\n          {isRunning ? \"Stop\" : \"Start\"}\r\n        </button>\r\n        <button className=\"stopwatch-button\" onClick={reset}>\r\n          Reset\r\n        </button>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Stopwatch;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;;EAEnC;EACA,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAACU,KAAK,CAACC,GAAG,CAAC;EAErDV,SAAS,CAAC,MAAM;IACd,IAAIW,UAAU;IACd,IAAIJ,SAAS,EAAE;MACb;MACAI,UAAU,GAAGC,WAAW,CAAC,MAAMN,OAAO,CAACD,IAAI,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;IACvD;IACA,OAAO,MAAMQ,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,CAACJ,SAAS,EAAEF,IAAI,CAAC,CAAC;;EAErB;EACA,MAAMS,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACX,IAAI,GAAG,MAAM,CAAC;;EAEvC;EACA,MAAMY,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEX,IAAI,GAAG,MAAM,GAAI,IAAI,CAAC;;EAElD;EACA,MAAMa,OAAO,GAAGH,IAAI,CAACC,KAAK,CAAEX,IAAI,GAAG,IAAI,GAAI,GAAG,CAAC;;EAE/C;EACA,MAAMc,YAAY,GAAGd,IAAI,GAAG,GAAG;;EAE/B;EACA,MAAMe,YAAY,GAAGA,CAAA,KAAM;IACzBZ,YAAY,CAAC,CAACD,SAAS,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMc,KAAK,GAAGA,CAAA,KAAM;IAClBf,OAAO,CAAC,CAAC,CAAC;EACZ,CAAC;EACD,oBACEJ,OAAA;IAAKoB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,eAClCrB,OAAA;MAAGoB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,GAC1BT,KAAK,EAAC,GAAC,EAACG,OAAO,CAACO,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAC,GAC7C,EAACP,OAAO,CAACM,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAC,GACrC,EAACN,YAAY,CAACK,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OASD,CAAC;AAEV;AAACzB,EAAA,CAtDQD,SAAS;AAAA2B,EAAA,GAAT3B,SAAS;AAwDlB,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}